*neo-tree.txt*    Plugin to browse the file system and other tree like structures

CONTENTS                                                            *neo-tree*
Introduction ................ |neo-tree-introduction|
Commands .................... |neo-tree-commands|
Mappings .................... |neo-tree-mappings|
  Navigation ................ |neo-tree-navigation|
  View Changes .............. |neo-tree-view-changes|
  File Actions .............. |neo-tree-file-actions|
  Filter .................... |neo-tree-filter|
Configuration ............... |neo-tree-configuration|
  Setup ..................... |neo-tree-setup|
  Hijack Netrw Behavior ..... |neo-tree-netrw-hijack|
  Component Configs ......... |neo-tree-component-configs|
  Git Status ................ |neo-tree-git-status|
  Diagnostics ............... |neo-tree-diagnostics|
  Indent markers ............ |neo-tree-indent-markers|
  Highlights ................ |neo-tree-highlights|
  Events .................... |neo-tree-events|
  Components and Renderers .. |neo-tree-renderers|
  Buffer Variables .......... |neo-tree-buffer-variables|
  Popups .................... |neo-tree-popups|
Other Sources ............... |neo-tree-sources|
  Buffers ................... |neo-tree-buffers|
  Git Status ................ |neo-tree-git-status-source|


INTRODUCTION                                             *neo-tree-introduction*

Neo-tree is a plugin for nvim that can display tree structures in a sidebar,
floating window, or in a split. The current version includes a filesystem
browser, a buffer list, and a git status view.

If you want to use this in splits like |netrw| instead of as a sidebar or
floating window, use the *Split commands, such as |NeoTreeRevealInSplit|. You
may use both styles at the same time if you want.


COMMANDS                                                     *neo-tree-commands*

Neo-tree does not define any default keybindings for nvim. The suggested
keybindings are:

    nnoremap / :NeoTreeRevealInSplitToggle<cr>                          
    nnoremap | :NeoTreeRevealToggle<cr>                          
    nnoremap <leader>b :NeoTreeFocus buffers<cr>
    nnoremap <leader>s :NeoTreeFocus git_status<cr>

NOTE: All of the below commands also have a Toggle variant, which will close
the window if it is already open. i.e. NeoTreeFocusToggle, NeoTreeShowToggle,
etc.

|NeoTreeFocus|                                                    *NeoTreeFocus*
NeoTreeFocus will open the sidebar and focus it if it is closed, and just switch
to the neo-tree window if it is already open. Takes an optional argument to
specify the source to focus, such as `filesystem` or `buffers`.

If you specify `window.position = "float"` in your configuration, this will
act like |NeoTreeFloat| but will not reveal the current file.

If you specify `window.position = "split"` in your configuration, this will act
like |NeoTreeShowInSplit|.


|NeoTreeShow|                                                      *NeoTreeShow*
You can also use NeoTreeShow which will open the tree, but leave the current
window focused. Takes an optional argument to specify the source to show.

If you specify `window.position: float` in your configuration, this will
act like |NeoTreeFloat| but will not reveal the current file.

If you specify `window.position = "split"` in your configuration, this will act
like |NeoTreeShowInSplit|.


|NeoTreeShowInSplit|                                        *NeoTreeShowInSplit*
This will show the tree in the currently focused window instead of a sidebar or
float, like |netrw| would. Opening a file from this tree will then open in the
same window as well. Please not that windows opened in this way will not react
to the `follow_current_file` option, as that applies to sidebars only.

This command is particularly useful if you want to use a mix of sidebars and
split style trees. If you only want netrw/split style, you can also specify
`window.position = "split"` in your config and the other commands will redirect
here.


|NeoTreeReveal|                                                  *NeoTreeReveal*
NeoTreeReveal is like NeoTreeFocus, but it will also find whatever file is in
the current buffer, expand all nodes needed to reveal it, and set the cursor on
that file. If the current file is not in the current working directory, you will
be prompted to change it. Add `!` to the command to force it to change the
working directory without prompting.

If you specify `window.position = "split"` in your configuration, this will act
like |NeoTreeRevealInSplit|.


|NeoTreeRevealInSplit|                                    *NeoTreeRevealInSplit*
Same idea as NeoTreeReveal, but this will use the current window instead of a
sidebar or float, like |netrw| would. Opening a file from this tree will then
open in the same window as well. Please not that windows opened in this way will
not react to the `follow_current_file` option, as that applies to sidebars only.

This command is particularly useful if you want to use a mix of sidebars and
split style trees. If you only want netrw/split style, you can also specify
`window.position = "split"` in your config and the other commands will redirect
here.


|NeoTreeFloat|                                                    *NeoTreeFloat*
You can also use NeoTreeFloat which will open the tree in a floating window. The
filesystem source will always reveal the current file if it is within the cwd
when called in this way. Takes an optional argument to specify the source to
show.

This will work even if you specify `left` or `right` for the position in your
config, it works as a one time override. If the current source is currently
displayed in a sidebar, it will be closed and recreated with the same state in
a floating window.


|NeoTreeClose|                                                    *NeoTreeClose*
Closes all Neo-tree windows. Takes an optional argument to specify the position
to close, such as `left` or `right`. The position corresponds to the
window.position setting in your config for each source.


|NeoTreePasteConfig|                                        *NeoTreePasteConfig*
This is a special command to help you get started. It will paste the complete,
fully commented default config at the current line. You can change what you
like, delete anything you are not going to change if you want, and pass that
`config` table to `require("neo-tree").setup(config)`


===============================================================================
MAPPINGS                                                                      ~
===============================================================================
                                                            *neo-tree-mappings*

NAVIGATION                                                *neo-tree-navigation*

Within the neo-tree window, for the filesystem source, the following mappings
are defined by default.

Note: The "selected" item is the line the cursor is currently on.

<2-LeftMouse> = open:        Expand or collapse a folder. If a file is selected,
                             open it in the window closest to the tree.

<cr>          = open:        Same as above.

S             = open_split:  Same as open, but opens in a new horizontal split.

s             = open_vsplit: Same as open, but opens in a vertical split

<bs>          = navigate_up: Moves the root directory up one level.

.             = set_root:    Changes the root directory to the currently 
                             selected folder.


FILE ACTIONS                                            *neo-tree-file-actions*
a    = add:                  Create a new file or directory.

d    = delete:               Delete the selected file or directory.

r    = rename:               Rename the selected file or directory.

c    = copy_to_clipboard:    Mark file to be copied.

x    = cut_to_clipboard:     Mark file to be cut (moved).

p    = paste_from_clipboard: Copy/move each marked file in the to the
                             selected folder.


VIEW CHANGES                                            *neo-tree-view-changes*
H = toggle_hidden:    Toggle whether hidden files (.*) are shown or not.

I = toggle_gitignore: Toggle whether the gitignore file is
                      respected.

R = refresh:          Rescan the filesystem and redraw the tree. Changes
                      made within nvim should be detected automatically, but
                      this is useful for changes made elsewhere.


FILTER                                                        *neo-tree-filter*
/     = filter_as_you_type: Filter the tree recursively, searching for
                            files and folders that contain the specified term as
                            you type. This will use fd if it is installed, or 
                            find, or which if you are on Windows.

                            As of v1.28, this acts like a fuzzy finder,
                            meaning that pressing up/down while the filter
                            window is open will move the cursor up and down in
                            the tree, and pressing `<enter>` will open that
                            item and clear the filter. Any other method of
                            closing the filter window will also clear the
                            filter.

f     = filter_on_submit:   Same as above, but does not search until you hit
                            enter. Useful if filter_as_you_type is too slow.
                            Also useful if you want to leave the tree
                            filtered.

<C-x> = clear_filter:       Removes the filter.


CUSTOM COMMANDS                                       *neo-tree-custom-commands*

If you want to define your own command, you have two options:
  1. You can define (or oVErride) a command in the `commands` section of the
  config for each source, then reference that by name in a mapping.
  2. You can map directly to a function and skip defining a command.

You probably want #2:
>
   require("neo-tree").setup({
     filesystem = {
       mappings = {
         ["?"] = functions(state)
           local node = state.tree:get_node()
           print(node.name)
         end
       }
     }
   })
<
..or
>
   local print_me = functions(state)
     local node = state.tree:get_node()
     print(node.name)
   end

   require("neo-tree").setup({
     filesystem = {
       mappings = {
         ["?"] = print_me
       }
     }
   })
<
...but if you want #1, here is how that works:

>
   require("neo-tree").setup({
     filesystem = {
       commands = {
         print_me = functions(state)
           local node = state.tree:get_node()
           print(node.name)
         end
       },
       mappings = {
         ["?"] = "print_me"
       }
     }
   })
<


================================================================================
CONFIGURATION                                                                  ~
================================================================================
                                                        *neo-tree-configuration*
Neo-tree is highly configurable and you should be able to make it do whatever
you want without having to change the internal code. Here are the ways you can
customize it:

By setting config options in the |neo-tree-setup| function. This is for very
common items and is how you would configure most lua plugins. You can also
change the look by configuring the appropriate highlight groups, see
|neo-tree-highlights|.

By creating custom mappings (see |neo-tree-mappings|). You can of course just
change what keys are mapped to which built-in functions, but you can also map
keys to a custom function and do whatever you want. See the wiki for some
examples: https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Recipes#commands

By hooking into |neo-tree-events|. You can do things like always clear the
search after opening a file, or define a custom file opener to choose what
window will be used, or respond to file events like renames and moves.

By configuring, rearranging, adding, or removing |neo-tree-renderers| for each
node type. The renderer is a list of components, such as "icon" and "name",
which determines how each node displayed. Use them as lego pieces to build what
you want to see.

By adding or replacing |neo-tree-components|. Components are the functions
called by the renderers, and they return the text and highlight group to be
displayed. If you want to gather extra data just once per render to be used by a
custom component, you can do so in the "before_render" event (see
|neo-tree-events|), set that data on the `state` object, and reference it in the
component. See the wiki for some examples of custom components:
https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Recipes#components


SETUP                                                           *neo-tree-setup*

To override the defaults or add new functionality, call the setup() function
with your overrides. For example, to add your own mappings in 'lua':

>
    require("neo-tree").setup({
      filesystem = {
        window = {
          mappings = {
            ["<F5>"] = "refresh",
            ["o"] = "open",
          }
        }
      }
    })
<

NOTE: The mappings you define will be merged with the default mappings. If you
wish to remove a default mapping without overriding it with your own function,
assign it the the string "none". This will cause it to be skipped and allow any
existing global mappings to work.

Run |NeoTreePasteConfig| to dump the fully commented default config in your
current file. Even if you don't want to use that config as your starting point,
you still may want to dump it to a blank .lua file just to read it as
documentation.


NETRW HIJACK BEHAVIOR                                    *neo-tree-netrw-hijack*

Neo-tree can and does hijack Netrw by default. This is configurable and can be
disabled if you use Netrw, or have other plugins that use Netrw functionality.
This can be controlled by setting the `filesystem.hijack_netrw_behavior` option
to one of:

disabled               Netrw left alone, neo-tree does not handle opening dirs.

open_default (default) Netrw disabled, opening a directory opens neo-tree
                       in whatever position is specified in `window.position`.

open_split             Netrw disabled, opening a directory opens within the
                       window like netrw would, regardless of `window.position`.

>
    require("neo-tree").setup({
      filesystem = {
        hijack_netrw_behavior = "open_default",
                             -- "open_split",  
                             -- "disabled", 
    })
<




COMPONENT CONFIGS                                   *neo-tree-component-configs*

The visual display of a node is made up of a series of components rendered in a
certain order and with certain configuration options. See |neo-tree-components|
for a deeper dive into customizing this aspect. If you wish to configure those
components in a universal way, the best place to do that is in the
`default_component_configs` section of the config.

For example, to add indent markers, you can apply your settings in each renderer
for each source, or just do it once in the default_component_configs section:

>
    require("neo-tree").setup({
      default_component_configs = {
        indent = {
          with_markers = true,
          indent_marker = "│",
          last_indent_marker = "└",
          indent_size = 2,
        },
      },
    })
<
See |neo-tree-indent-markers| for more details.

The default config has more examples of component configuration, use
|NeoTreePasteConfig| to view that default config.


GIT STATUS                                                 *neo-tree-git-status*

By default, Neo-tree will attempt to get the git status for files in the
current directory. It will use this information to add markers to the right of
your files, and will set the highlight groups of files and directories.

To disable this feature entirely, set `enable_git_status = false` in your
config when calling the setup function. To just disable colors on file or
directory names, you can set `use_git_status_colors = false` in the `name`
component of your renderer(s).

See also: |neo-tree-git-status-source|


DIAGNOSTICS                                               *neo-tree-diagnostics*

By default, Neo-tree will display diagnostic symbols next to files. It will
display the highest severity level for files, and errors only for directories.
If you want to use symbols instead of "E", "W", "I", and H", you'll need to
define those somewhere in your nvim configuration. Here is an example:

>
    vim.fn.sign_define("LspDiagnosticsSignError",
        {text = " ", texthl = "LspDiagnosticsSignError"})
    vim.fn.sign_define("LspDiagnosticsSignWarning",
        {text = " ", texthl = "LspDiagnosticsSignWarning"})
    vim.fn.sign_define("LspDiagnosticsSignInformation",
        {text = " ", texthl = "LspDiagnosticsSignInformation"})
    vim.fn.sign_define("LspDiagnosticsSignHint",
        {text = "", texthl = "LspDiagnosticsSignHint"})
<

To disable this feature entirely, set `enable_diagnostics = false` in your
config when calling the setup function.


INDENT MARKERS                                      *neo-tree-indent-markers*

By default, indent markers (aka indent guides) are disabled. In Neo-tree
indent is a component, so to enable indent markers, you need configure the
`indent` component:

...at the global level:
>
    require("neo-tree").setup({
      default_component_configs = {
        indent = {
          with_markers = true,
          indent_marker = "│",
          last_indent_marker = "└",
          indent_size = 2,
        },
      },
    })
<

...or in each renderer:
>
    require("neo-tree").setup({
        filesystem = {
            renderers = {
              directory = {
                {
                  "indent",
                  with_markers = true,
                  indent_marker = "│",
                  last_indent_marker = "└",
                  indent_size = 2,
                },
                -- other components
              },
              file = {
                {
                  "indent",
                  with_markers = true,
                  indent_marker = "│",
                  last_indent_marker = "└",
                  indent_size = 2,
                -- other components
              },
            }
        }
    })
<

You also can change the marker characters. To do this, you need change
`indent_marker` and `last_indent_marker` settings.

To change highlight of indent markers, you need configure `NeoTreeIndentMarker`
highlight group. By default, it refers to `Normal` highlight.


HIGHLIGHTS                                                 *neo-tree-highlights*

The following highlight groups are defined by this plugin. If you set any of
these yourself before the plugin loads, it will not be touched. If they do not
exist, they will be created.

NeoTreeBufferNumber       The buffer number shown in the buffers source.
NeoTreeCursorLine         |hi-CursorLine| override in Neo-tree window.
NeoTreeDimText            Greyed out text used in various places.
NeoTreeDirectoryName      Directory name.
NeoTreeDirectoryIcon      Directory icon.
NeoTreeFileIcon           File icon, when not overriden by devicons.
NeoTreeFileName           File name, when not overwritten by another status.
NeoTreeFileNameOpened     File name when the file is open. Not used yet.
NeoTreeSymbolicLinkTarget Symbolic link target.
NeoTreeFilterTerm         The filter term, as displayed in the root node.
NeoTreeFloatBorder        The border for pop-up windows.
NeoTreeGitAdded           File name when the git status is added.
NeoTreeGitConflict        File name when the git status is conflict.
NeoTreeGitModified        File name when the git status is modified.
NeoTreeGitUntracked       File name when the git status is untracked.
NeoTreeNormal             |hl-Normal| override in Neo-tree window.
NeoTreeNormalNC           |hi-NormalNC| override in Neo-tree window.
NeoTreeRootName           The name of the root node.
NeoTreeTitleBar           Used for the title bar of pop-ups, when the border-style
                          is set to "NC". This is derived from NeoTreeFloatBorder.
NeoTreeIndentMarker       The style of indentation markers (guides). By default,
                          the "Normal" highlight is used.


EVENTS                                                        *neo-tree-events*

Events are one way to customize the behavior of Neo-tree. You can add event
handlers to your config in the `event_handlers` section, which should be a list
of objects in the form:

>
    {
      event = "event_name",
      handler = function(arg)
        -- do something, the value of arg varies by event.
      end,
      id = "optional unique id, only meaningful if you want to unsubscribe later"
    }
<

The following events are available:

"before_render"
Fired after items have been collected from the source but before drawing the
nodes of the tree. This is the best place to gather additional data to be used
by components. The argument passed is the state of the source, which is also
passed to components and commands down the line.

"after_render"
Fired after the tree has been rendered. The argument passed is the state of the
source, which is also passed to components and commands down the line.

"file_added"
Fired after a file (or folder) has been created, either by using the "add"
command or by copy and paste. The arg is the full path to the new file.

"file_deleted"
Fired after a file (or folder) has been deleted. The arg is the full path to the
deleted file.

"file_moved"
Fired after a file (or folder) has been moved. The arg is a table containing
`source` and `destination` properties.

"file_open_requested"
Fired just before a file is opened. The arg is a table containing the `state`
of the source being used, the `path` of the file to be opened, and `open_cmd`,
which is the open command that was requested. `open_cmd` will be either |edit|,
|split|, or |vsplit|. This function should return a table with a property called
`handled` which is true if the file open operation was handled, or false if it
was not. If `{ handled = true }` is not returned, the file will be opened using
the built-in logic.

"file_opened"
Fired after a file has been opened. You might use this to auto-close the window
or clear the filter. The arg is the path of the file opened.

"file_renamed"
Fired after a file (or folder) has been renamed. The arg is an table containing
`source` and `destination` properties.

NOTE: The following events are used internally and not intended for end user
usage. You can use them if you want, but beware that they may be debounced, and
the details of how frequently they are fired and what events are dropped will be
changed without warning.

"vim_diagnostic_changed"
Fired on the |DiagnosticChanged| autocmd event. The arg is a table with one
property: `diagnostics_lookup`, which is a table where the keys are file names
and the values are tables with diagnostic counts by severity level.

"vim_buffer_changed"
Fired on the following autocmd events: |BufDelete|, |BufWritePost|,
|BufFilePost|, |BufNew|

"vim_buffer_enter"
Fired on the following autocmd events: |BufEnter|, |BufWinEnter|

"vim_dir_changed"
Fired on the |DirChanged| autocmd event

"vim_win_enter"
Fired on the |WinEnter| autocmd event

"vim_colorscheme"
Fired on the |ColorScheme| autocmd event


You can also define your own with:
>
>
    require("neo-tree.events.queue").define_event(event_name, {
      setup = <function>,
      seed = <function>,
      teardown = <function>,
      debounce_frequency = <number>,
      once = <boolean>,
      cancelled = <boolean>
    })
<

The setup function is run the first time the event is subscribed to. For an
autocmd event, this would define the vim autocmd to connect it to fire_event().

The `seed` function is run at the begining of every event firing. The diagnostics
event uses this to collect the diagnostic information and pass it to all
subscribers.

The `teardown` function is used when the last subscriber unsubscribes, and cleans
up. This is like Dispose in other languages.

`debounce_frequency` is the minimum number of milliseconds between each invocation
of the event. The first event is gauranteed to fire, as well as the last one, but
in between events may be dropped if this is set to a number greater than zero.

`once` means to only fire this event handler once then mark it as `cancelled`.

`cancelled` means that this event handler will be skipped in all future event
fires, and will be discarded on the next cleanup of the queue.


COMPONENTS AND RENDERERS                                   *neo-tree-renderers*

A renderer is just a list of component configs, to be rendered in order to
create a line in the tree. Each renderer is for a specific node type, such as
`directory` or `file`.  To view the avilable built-in components and their
configs for each source, look at the default config by pasting it with
|NeoTreePasteConfig| or view it online at:
https://github.com/nvim-neo-tree/neo-tree.nvim/blob/v1.x/lua/neo-tree/defaults.lua

                                                           *neo-tree-components*
A component is a function that returns a single text object:
>
    {
      text = "Node A",
      highlight = "Normal"
    }
<

... or a list of text objects:
>
    {
      {
        text = "Node Name",
        highlight = "Directory"
      },
      {
        text = "[",
        highlight = "Comment"
      },
      {
        text = "I'm Sepcial!",
        highlight = "SpecialChar"
      },
        text = "[",
        highlight = "Comment"
      }
    }
<

The only reason to return a list of objects is to use multiple highlight groups.
These components and renderers are defined per source by passing them in the
setup. If you define a component with the same name of a built-in component, it
will replace that built-in component. Otherwise it will be added to the existing
set of components.

Each component function is called with the following args:
  `config` The config object defined in the renderer. This is how a component
  can be made to be configurable. This is useful if you want different behavior
  in a directory renderer vs a file renderer. The config is a combination of any
  options specified in the default_component_configs
  (|neo-tree-default-component-configs|), which can be overriden by settings
  specified within each renderer config.

  `node` The NuiNode object for this node. The properties can vary by source, but
  each one will generally have at least id and name properties.

  `state` This is the state of the plugin. This object is persistent for the
  life of the source, with one state object per source per tab. the entirety of
  all state and source level configuration is in this one object. Aside from
  configuration, it can also hold anything you may want to set in a
  "before_render" event.

For example, here is the simplest possible component:

>
    require("neo-tree").setup({
      filesystem = {
        components = {

          name = function(config, node)
            return { 
              text = node.name,
              highlight = "NeoTreeFileName"
            }
          end

        }
      }
    })
<

For a more complete example, here is the actual built-in `name` component, which
is much more dynamic and configurable:

>
    require("neo-tree").setup({
      filesystem = {
        components = {

          name = function(config, node, state)
            local highlight = config.highlight or highlights.FILE_NAME
            if node.type == "directory" then
              highlight = highlights.DIRECTORY_NAME
            end
            if node:get_depth() == 1 then
              highlight = highlights.ROOT_NAME
            else
              if config.use_git_status_colors == nil or config.use_git_status_colors then
                local git_status = state.components.git_status({}, node, state)
                if git_status and git_status.highlight then
                  highlight = git_status.highlight
                end
              end
            end
            return {
              text = node.name,
              highlight = highlight,
            }
          end

        }
      }
    })
<


BUFFER VARIABLES                                     *neo-tree-buffer-variables*

Neo-tree sets certain buffer options and variables that you may use in custom
code or integrations if you need it. The |filetype| of the main window is
`neo-tree`. The buffer will also have these local variables set:

`winid` The window handle of the window that it was created in.
`tabnr` The tab number that it was created in.
`source` The name of the source that created it, i.e. filesystem, buffers, etc.

Please note that if the buffer is displayed in another window or tab, it's
behavior is unpredictable. It is meant to be locked to it's original location,
which is why those variables are recorded.


POPUPS                                                         *neo-tree-popups*

Popups will be created with a |filetype| of `neo-tree-popup`. You can use this
as the target for autocmds or to exclude them from being acted upon by other
plugins.

They can also be configured by setting the `popup_border_style` in your config,
and the colors of that border are controlled by the `NeoTreeFloatBorder`
highlight group. If you you use the special `NC` option for
`popup_border_style`, the title bar of that popup uses the `NeoTreeTitleBar`
highlight group.


================================================================================
OTHER SOURCES                                                                  ~
================================================================================
                                                              *neo-tree-sources*

Neo-tree supports other sources beside the filesystem source which is used by
default. The rest of the sources follow the same pattern as the filesystem
sources described above. The following sections will give an overview of each
source and describe the options that are unique to those sources.


BUFFERS                                                        *neo-tree-buffers*

The buffers source shows all open buffers. This is the same list that |ls| would
show. This view adds one component, which is the buffer number, shown to the
right of the file name by default.

If you use sessions, your previously loaded buffers may be saved as part of
the session, but they will be unloaded at first. If you want to see these
unloaded buffers, set `show_unloaded = true` in your `buffers` config.
Otherwise, you will only see the buffers that have been opened since starting
nvim.

As a list of files, this source shares most of the commands with the filesystem
source, with the exception of filtering. Some of these commands make less
sense to use here, as things like adding new files won't be visible until you
open them by some other means. One command that is unique to this view is
`buffer_delete`, which issues |:bdelete| on the selected buffer. This is mapped
to `bd` by default.


GIT STATUS                                           *neo-tree-git-status-source*

The git_status view shows the output of the `git status` command in the tree.
Unlike the other sources, this will always show the project root of the
current working directory. If the working tree is clean, this view will be
empty.

This view has most file commands except for "add", plus the following git
specific commands:

      ["A"]  = "git_add_all",
      ["ga"] = "git_add_file",
      ["gu"] = "git_unstage_file",
      ["gr"] = "git_revert_file",
      ["gc"] = "git_commit"
      ["gp"] = "git_push",
      ["gg"] = "git_commit_and_push",

vim:tw=80:ts=2:et:ft=help:
