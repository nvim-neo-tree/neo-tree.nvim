*neo-tree.txt*    Plugin to browse the file system and other tree like structures

CONTENTS                                                            *neo-tree*
Introduction ........ |Neo-tree-Introduction|
Commands ............ |Neo-tree-Commands|
Mappings ............ |Neo-tree-Mappings|
  Navigation ........ |Neo-tree-Navigation|
  View Changes ...... |Neo-tree-View-Changes|
  File Actions ...... |Neo-tree-File-Actions|
  Filter ............ |Neo-tree-Filter|
Configuration ....... |Neo-tree-Configuration|
  Setup ............. |Neo-tree-Setup|
  Diagnostics ....... |Neo-tree-Diagnostics|
  Highlights ........ |Neo-tree-Highlights|
  Events ............ |Neo-tree-Events|
Other Sources ....... |Neo-tree-Sources|
  Buffers ........... |Neo-tree-Buffers|
  Git Status ........ |Neo-tree-Git-Status|


INTRODUCTION                                             *Neo-tree-Introduction*

Neo-tree is a plugin for nvim that can display tree structures in a sidebar or
a floating window. The current version includes a filesystem browser and a
buffer list.


COMMANDS                                                     *Neo-tree-Commands*

Neo-tree does not define any default keybindings for nvim. The suggested
keybindings are:

    nnoremap / :NeoTreeReveal<cr>                          
    nnoremap | :NeoTreeClose<cr>                          
    nnoremap <leader>b :NeoTreeFocus buffers<cr>

NOTE: All of the below commands also have a Toggle variant, which will close
the window if it is already open. i.e. NeoTreeFocusToggle, NeoTreeShowToggle,
etc.

|NeoTreeFocus|                                                    *NeoTreeFocus*
NeoTreeFocus will open the sidebar and focus it if it is closed, and just switch
to the neo-tree window if it is already open. Takes an optional argument to
specify the source to focus, such as `filesystem` or `buffers`.

If you specify `window.position: float` in your configuration, this will
act like |NeoTreeFloat| but will not reveal the current file.

|NeoTreeShow|                                                      *NeoTreeShow*
You can also use NeoTreeShow which will open the tree, but leave the current
window focused. Takes an optional argument to specify the source to show.

If you specify `window.position: float` in your configuration, this will
act like |NeoTreeFloat| but will not reveal the current file.

|NeoTreeReveal|                                                  *NeoTreeReveal*
NeoTreeReveal is like NeoTreeFocus, but it will also find whatever file is in
the current buffer, expand all nodes needed to reveal it, and set the cursor on
that file. If the current file is not in the current working directory, you will
be prompted to change it.

|NeoTreeFloat|                                                    *NeoTreeFloat*
You can also use NeoTreeFloat which will open the tree in a floating window. The
filesystem source will always reveal the current file if it is within the cwd
when called in this way. Takes an optional argument to specify the source to
show.

This will work even if you specify `left` or `right` for the position in your
config, it works as a one time override. If the current source is currently
displayed in a sidebar, it will be closed and recreated with the same state in
a floating window.

|NeoTreeClose|                                                    *NeoTreeClose*
Closes all Neo-tree windows. Takes an optional argument to specify the position
to close, such as `left` or `right`. The position corresponds to the
window.position setting in your config for each source.


===============================================================================
MAPPINGS                                                                      ~
===============================================================================
                                                            *Neo-tree-Mappings*

NAVIGATION                                                *Neo-tree-Navigation*

Within the neo-tree window, for the filesystem source, the following mappings
are defined by default.

Note: The "selected" item is the line the cursor is currently on.

<2-LeftMouse> = open:        Expand or collapse a folder. If a file is selected,
                             open it in the window closest to the tree.
<cr>          = open:        Same as above.
S             = open_split:  Same as open, but opens in a new horizontal split.
s             = open_vsplit: Same as open, but opens in a vertical split
<bs>          = navigate_up: Moves the root directory up one level.
.             = set_root:    Changes the root directory to the currently 
                             selected folder.


FILE ACTIONS                                            *Neo-tree-File-Actions*
a    = add:                  Create a new file or directory.
d    = delete:               Delete the selected file or directory.
r    = rename:               Rename the selected file or directory.
c    = copy_to_clipboard:    Mark file to be copied.
x    = cut_to_clipboard:     Mark file to be cut (moved).
p    = paste_from_clipboard: Copy/move each marked file in the to the
                             selected folder.


VIEW CHANGES                                            *Neo-tree-View-Changes*
H = toggle_hidden:    Toggle whether hidden files (.*) are shown or not.
I = toggle_gitignore: Toggle whether the gitignore file is
                      respected.
R = refresh:          Rescan the filesystem and redraw the tree. Changes
                      made within nvim should be detected automatically, but
                      this is useful for changes made elsewhere.


FILTER                                                        *Neo-tree-Filter*
/     = filter_as_you_type: Filter the tree recursively, searching for
                            files and folders that contain the specified term as
                            you type. This will fd if it is installed, or find.
f     = filter_on_submit:   Same as above, but does not search until you hit
                            enter. Useful if filter_as_you_type is too slow.
<C-x> = clear_filter:       Removes the filter.



================================================================================
CONFIGURATION                                                                  ~
================================================================================
                                                        *Neo-tree-Configuration*

SETUP                                                           *Neo-tree-Setup*

To override the defaults or add new functionality, call the setup() function
with your overrides. For example, to add your own mappings in 'lua':
>
>
require("neo-tree").setup({
  filesystem = {
    window = {
      mappings = {
        ["<F5>"] = "refresh",
        ["o"] = "open",
      }
    }
  }
})
<

Below is a complete skeleton of all of the configuration options, ready for
copy and paste into your lua config file.

>
local highlights = require('neo-tree.ui.highlights')

require("neo-tree").setup({
  -- The default_source is the one used when calling require('neo-tree').show()
  -- without a source argument.
  default_source = "filesystem",
  popup_border_style = "NC", -- "double", "none", "rounded", "shadow", "single" or "solid"
  -- "NC" is a special style that works well with NormalNC set
  enable_git_status = true,
  enable_diagnostics = true,
  open_files_in_last_window = true, -- false = open files int top left window
                                     -- true = open files in last window visited
  log_level = "info", -- "trace", "debug", "info", "warn", "error", "fatal"
  log_to_file = false, -- true, false, "/path/to/file.log", use :NeoTreeLogs to show the file
  --
  --event_handlers = {
  --  {
  --    event = "before_render",
  --    handler = function (state)
  --      -- add something to the state that can be used by custom components
  --    end
  --  },
  --  {
  --    event = "file_opened",
  --    handler = function(file_path)
  --      --auto close
  --      require("neo-tree").close_all()
  --    end
  --  },
  --  {
  --    event = "file_renamed",
  --    handler = function(args)
  --      -- fix references to file
  --      print(args.source, " renamed to ", args.destination)
  --    end
  --  },
  --  {
  --    event = "file_moved",
  --    handler = function(args)
  --      -- fix references to file
  --      print(args.source, " moved to ", args.destination)
  --    end
  --  },
  --},
  filesystem = {
    window = {
      -- see https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/popup
      -- for possible options. These can also be functions that return these
      -- options.
      position = "left", -- left, right, float
      width = 40, -- applies to left and right positions
      -- settings that apply to float position only
      popop = {
        size = {
          height = "80%",
          width = "50%"
        },
        position = "50%" -- 50% means center it
        -- you can also specify border here, if you want a different setting from
        -- the global popup_border_style.
      },
      -- Mappings for tree window. See |Neo-tree-Mappings| for built-in 
      -- commands. You can also create your own commands by providing a 
      -- function instead of a string. See the built-in commands for examples.
      mappings = {
        ["<2-LeftMouse>"] = "open",
        ["<cr>"] = "open",
        ["S"] = "open_split",
        ["s"] = "open_vsplit",
        ["C"] = "close_node",
        ["z"] = "close_all_nodes",
        ["<bs>"] = "navigate_up",
        ["."] = "set_root",
        ["H"] = "toggle_hidden",
        ["I"] = "toggle_gitignore",
        ["R"] = "refresh",
        ["/"] = "filter_as_you_type",
        ["f"] = "filter_on_submit",
        ["<C-x>"] = "clear_filter",
        ["a"] = "add",
        ["d"] = "delete",
        ["r"] = "rename",
        ["c"] = "copy_to_clipboard",
        ["x"] = "cut_to_clipboard",
        ["p"] = "paste_from_clipboard",
      }
    },
    search_limit = 50, -- max number of search results when using filters
    filters = {
      show_hidden = false,
      respect_gitignore = true,
    },
    bind_to_cwd = true, -- true creates a 2-way binding between vim's cwd and neo-tree's root
    -- The components section provides custom functions that may be called by 
    -- the renderers below. Each componment is a function that takes the
    -- following arguments:
    --      config: A table containing the configuration provided by the user
    --              when declaring this component in their renderer config.
    --      node:   A NuiNode object for the currently focused node.
    --      state:  The current state of the source providing the items.
    --
    -- The function should return either a table, or a list of tables, each of which
    -- contains the following keys:
    --    text:      The text to display for this item.
    --    highlight: The highlight group to apply to this text.
    components = {
      hello_node = function (config, node, state)
        local text = "Hello " .. node.name
        if state.search_term then
          text = string.format("Hello '%s' in %s", state.search_term, node.name)
        end
        return {
          text = text,
          highlight = config.highlight or highlights.FILE_NAME,
        }
      end
    },
    -- This section provides the renderers that will be used to render the tree.
    -- The first level is the node type.
    -- For each node type, you can specify a list of components to render.
    -- Components are rendered in the order they are specified.
    -- The first field in each component is the name of the function to call.
    -- The rest of the fields are passed to the function as the "config" argument.
    renderers = {
      directory = {
        {
          "icon",
          folder_closed = "",
          folder_open = "",
          padding = " ",
        },
        { "current_filter" },
        { "name" },
        {
          "clipboard",
          highlight = "NeoTreeDimText"
        },
        { "diagnostics", errors_only = true },
        --{ "git_status" },
      },
      file = {
        {
          "icon",
          default = "*",
          padding = " ",
        },
        --{ "hello_node", highlight = "Normal" }, -- For example, don't actually
        -- use this!
        {
          "name",
          use_git_status_colors = true
        },
        {
          "clipboard",
          highlight = "NeoTreeDimText"
        },
        { "diagnostics" },
        {
          "git_status",
          highlight = "NeoTreeDimText"
        }
      },
    }
  }
})
<

GIT STATUS                                           *Neo-tree_Setup-Git-Status*

By default, Neo-tree will attempt to get the git status for files in the
current directory. It will use this information to add markers to the right of
your files, and will set the highlight groups of files and directories.

To disable this feature entirely, set `enable_git_status = false` in your
config when calling the setup function. To just disable colors on file or
directory names, you can set `use_git_status_colors = false` in the `name`
component of your renderer(s).


DIAGNOSTICS                                         *Neo-tree-Setup-Diagnostics*

By default, Neo-tree will display diagnostic symbols next to files. It will
display the highest severity level for files, and errors only for directories.
If you want to use symbols instead of "E", "W", "I", and H", you'll need to
define those somewhere in your nvim configuration. Here is an example:

>
vim.fn.sign_define("LspDiagnosticsSignError",
    {text = " ", texthl = "LspDiagnosticsSignError"})
vim.fn.sign_define("LspDiagnosticsSignWarning",
    {text = " ", texthl = "LspDiagnosticsSignWarning"})
vim.fn.sign_define("LspDiagnosticsSignInformation",
    {text = " ", texthl = "LspDiagnosticsSignInformation"})
vim.fn.sign_define("LspDiagnosticsSignHint",
    {text = "", texthl = "LspDiagnosticsSignHint"})
<

To disable this feature entirely, set `enable_diagnostics = false` in your
config when calling the setup function.

HIGHLIGHTS                                                 *Neo-tree-Highlights*

The following highlight groups are defined by this plugin. If you set any of
these yourself before the plugin loads, it will not be touched. If they do not
exist, they will be created.

NeoTreeBufferNumber       The buffer number shown in the buffers source.
NeoTreeCursorLine         |hi-CursorLine| override in Neo-tree window.
NeoTreeDimText            Greyed out text used in various places.
NeoTreeDirectoryName      Directory name.
NeoTreeDirectoryIcon      Directory icon.
NeoTreeFileIcon           File icon, when not overriden by devicons.
NeoTreeFileName           File name, when not overwritten by another status.
NeoTreeFileNameOpened     File name when the file is open. Not used yet.
NeoTreeSymbolicLinkTarget Symbolic link target.
NeoTreeFilterTerm         The filter term, as displayed in the root node.
NeoTreeFloatBorder        The border for pop-up windows.
NeoTreeGitAdded           File name when the git status is added.
NeoTreeGitConflict        File name when the git status is conflict.
NeoTreeGitModified        File name when the git status is modified.
NeoTreeGitUntracked       File name when the git status is untracked.
NeoTreeNormal             |hl-Normal| override in Neo-tree window.
NeoTreeNormalNC           |hi-NormalNC| override in Neo-tree window.
NeoTreeRootName           The name of the root node.
NeoTreeTitleBar           Used for the title bar of pop-ups, when the border-style
                          is set to "NC". This is derived from NeoTreeFloatBorder.

EVENTS                                                        *Neo-tree-Events*

Events are one way to customize the behavior of Neo-tree. You can add event
handlers to your config in the `event_handlers` section, which should be a list
of objects in the form:


{
  event = "event_name",
  handler = function(arg)
    -- do something, the value of arg varies by event.
  end,
  id = "optional unique id, only meaningful if you want to unsubscribe later"
}
<

The following events are available:

"before_render"
Fired after items have been collected from the source but before drawing the
nodes of the tree. This is the best place to gather additional data to be used
by components. The argument passed is the state of the source, which is also
passed to components and commands down the line.

"after_render"
Fired after the tree has been rendered. The argument passed is the state of the
source, which is also passed to components and commands down the line.

"file_added"
Fired after a file (or folder) has been created, either by using the "add"
command or by copy and paste. The arg is the full path to the new file.

"file_deleted"
Fired after a file (or folder) has been deleted. The arg is the full path to the
deleted file.

"file_moved"
Fired after a file (or folder) has been moved. The arg is an table containing
`source` and `destination` properties.

"file_opened"
Fired after a file has been opened. You might use this to auto-close the window
or clear the filter. The arg is the path of the file opened.

"file_renamed"
Fired after a file (or folder) has been renamed. The arg is an table containing
`source` and `destination` properties.

"vim_diagnostic_changed"
Fired on the |DiagnosticChanged| autocmd event. The arg is a table where the keys
are file names and the values are tables with diagnostic counts by severity level.

"vim_buffer_changed"
Fired on the following autocmd events: |BufDelete|, |BufWritePost|, |BufFilePost|, |BufNew|

"vim_buffer_enter"
Fired on the following autocmd events: |BufEnter|, |BufWinEnter|

"vim_dir_changed"
Fired on the |DirChanged| autocmd event

"vim_win_enter"
Fired on the |WinEnter| autocmd event


You can also define your own with:
>
require("neo-tree.events.queue").define_event(event_name, {
  setup = <function>,
  seed = <function>,
  teardown = <function>,
  debounce_frequency = <number>
})

The setup function is run the first time the event is subscribed to. For an
autocmd event, this would define the vim autocmd to connect it to fire_event().

The seed function is run at the begining of every event firing. The diagnostics
event uses this to collect the diagnostic information and pass it to all
subscribers.

The teardown function is used when the last subscriber unsubscribes, and cleans
up. This is like Dispose in other languages.

debounce_frequency is the minimum number of milliseconds between each invocation
of the event. The first event is gauranteed to fire, as well as the last one, but
in between events may be dropped if this is set to a number greater than zero.


================================================================================
OTHER SOURCES                                                                  ~
================================================================================
                                                              *Neo-tree-Sources*

Neo-tree supports other sources beside the filesystem source which is used by
default. The rest of the sources follow the same pattern as the filesystem
sources described above. The following sections will give an overview of each
source and describe the options that are unique to those sources.

BUFFERS                                                        *Neo-tree-Buffers*

The buffers source shows all open buffers. This is the same list that |ls| would
show. This view adds one component, which is the buffer number, shown to the
right of the file name by default.

If you use sessions, your previously loaded buffers may be saved as part of
the session, but they will be unloaded at first. If you want to see these
unloaded buffers, set `show_unloaded = true` in your `buffers` config.
Otherwise, you will only see the buffers that have been opened since starting
nvim.

As a list of files, this source shares most of the commands with the filesystem
source, with the exception of filtering. Some of these commands make less
sense to use here, as things like adding new files won't be visible until you
open them by some other means. One command that is unique to this view is
`buffer_delete`, which issues |:bdelete| on the selected buffer. This is mapped
to `bd` by default.

GIT STATUS                                                  *Neo-tree-Git-Status*

The git_status view shows the output of the `git status` command in the tree.
Unlike the other sources, this will always show the project root of the
current working directory. If the working tree is clean, this view will be
empty.

This view has most file commands except for "add", plus the following git
specific commands:

      ["A"]  = "git_add_all",
      ["ga"] = "git_add_file",
      ["gu"] = "git_unstage_file",
      ["gr"] = "git_revert_file",
      ["gc"] = "git_commit"
      ["gp"] = "git_push",
      ["gg"] = "git_commit_and_push",

vim:tw=80:ts=2:et:ft=help:
